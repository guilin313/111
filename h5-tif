import os
import h5py
import numpy as np
import tifffile as tiff

source_directory = "path/to/source"  # 你的 h5 文件所在目录
target_directory = "path/to/target"  # 目标 tif 存放目录

def is_abnormal_image(data, black_threshold=0.33, black_value=10):
    """检测图像是否异常（全黑、全白 或者 1/3 以上区域是黑的）。"""
    min_val, max_val = np.min(data), np.max(data)

    # 🚫 全黑或全白
    if min_val == max_val:
        print(f"🚫 该数据是全黑或全白")
        return True

    # 计算黑色像素比例
    black_pixels = np.sum(data <= black_value)  # 设定阈值，比如 ≤10 认为是黑色
    total_pixels = data.size
    black_ratio = black_pixels / total_pixels

    print(f"📊 黑色区域占比: {black_ratio:.2%}")

    if black_ratio > black_threshold:
        print(f"🚫 黑色区域超过 {black_threshold*100:.0f}% ({black_ratio:.2%})，跳过")
        return True

    return False

def convert_h5_to_tif(source_file, target_file):
    """读取 .h5 文件并转换为 uint8 格式 .tif，如果数据异常则跳过。"""
    try:
        with h5py.File(source_file, "r") as h5f:
            print(f"🔍 处理文件：{source_file}")

            # 检查 'main' 关键字
            if "main" not in h5f:
                print(f"⚠️ {source_file} 未找到 'main'，keys：{list(h5f.keys())}，跳过")
                return
            
            # 读取数据
            data = h5f["main"][:]
            print(f"📏 数据形状：{data.shape}, dtype: {data.dtype}")

            # 确保是 3D 数据
            if data.ndim != 3:
                print(f"🚫 {source_file} 不是 3D 数据，跳过")
                return

            # 判断是否为异常图像
            if is_abnormal_image(data):
                print(f"🚫 {source_file} 是异常图像，跳过")
                return

            # 归一化到 [0, 255] 并转换为 uint8
            data_min, data_max = np.min(data), np.max(data)
            data = ((data - data_min) / (data_max - data_min) * 255).astype(np.uint8)

            # 保存为 TIFF（uint8）
            tiff.imwrite(target_file, data)
            print(f"✅ {source_file} → {target_file} (uint8)")

    except Exception as e:
        print(f"❌ 处理 {source_file} 时出错：{e}")

def process_directory(source_dir, target_dir):
    """遍历源文件夹，查找 .h5 并转换为 .tif。"""
    h5_files_count = 0

    for root, _, files in os.walk(source_dir):
        relative_path = os.path.relpath(root, source_dir)
        target_subdir = os.path.join(target_dir, relative_path)
        os.makedirs(target_subdir, exist_ok=True)  # 确保子文件夹存在

        for file in files:
            if file.endswith(".h5"):
                h5_files_count += 1
                source_file = os.path.join(root, file)
                target_file = os.path.join(target_subdir, file.replace(".h5", ".tif"))
                convert_h5_to_tif(source_file, target_file)
    
    if h5_files_count == 0:
        print(f"⚠️ 未在 {source_dir} 发现 .h5 文件，请检查路径是否正确！")

if __name__ == "__main__":
    process_directory(source_directory, target_directory)




inflating: 4096_2048_2300_2400.h5  
  inflating: 2048_4096_600_700.h5    

Archive:  Kasthuri2015_hdf_5.zip
  inflating: 8192_5120_100_200.h5    
  inflating: 9216_7168_800_900.h5    
  inflating: 8192_5120_1700_1800.h5  
  inflating: 7168_4096_800_900.h5    
replace 3072_4096_1200_1300.h5? [y]es, [n]o, [A]ll, [N]one, [r]ename: 






https://github.com/cvlab-stonybrook/SelfMedMAE/blob/main/README.md








import os
import h5py
import numpy as np
from tifffile import imsave

def crop_and_save_h5_to_tiff(input_folder, output_folder, crop_depth=32, crop_height=320, crop_width=320):
    """
    将输入文件夹中的 HDF5 文件裁剪为指定尺寸的 TIFF 图像，并保存到输出文件夹。

    参数：
    - input_folder: 包含 HDF5 文件的输入文件夹路径。
    - output_folder: 保存裁剪后 TIFF 图像的输出文件夹路径。
    - crop_depth: 裁剪块的深度尺寸，默认为 32。
    - crop_height: 裁剪块的高度尺寸，默认为 320。
    - crop_width: 裁剪块的宽度尺寸，默认为 320。
    """
    if not os.path.exists(output_folder):
        os.makedirs(output_folder)

    for filename in os.listdir(input_folder):
        if filename.endswith('.h5'):
            input_path = os.path.join(input_folder, filename)
            with h5py.File(input_path, 'r') as h5_file:
                # 假设数据存储在名为 'data' 的数据集中
                data = h5_file['data'][:]
                depth, height, width = data.shape

                # 计算可以完全裁剪的区域
                max_depth = (depth // crop_depth) * crop_depth
                max_height = (height // crop_height) * crop_height
                max_width = (width // crop_width) * crop_width

                crop_num = 0
                for d in range(0, max_depth, crop_depth):
                    for h in range(0, max_height, crop_height):
                        for w in range(0, max_width, crop_width):
                            crop = data[d:d + crop_depth, h:h + crop_height, w:w + crop_width]
                            crop_num += 1
                            output_filename = f"{os.path.splitext(filename)[0]}_crop_{crop_num}.tif"
                            output_path = os.path.join(output_folder, output_filename)
                            imsave(output_path, crop.astype(np.float32))
                            print(f"保存裁剪图像: {output_path}")

if __name__ == "__main__":
    input_folder = 'path/to/input_folder'  # 替换为实际的输入文件夹路径
    output_folder = 'path/to/output_folder'  # 替换为实际的输出文件夹路径
    crop_and_save_h5_to_tiff(input_folder, output_folder)
