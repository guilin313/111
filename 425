import os
import matplotlib.pyplot as plt
from tensorboard.backend.event_processing import event_accumulator

# 设置日志目录（可改为你自己的）
log_root = './logs_unetr_affinity3d2'
runs = [log_root]  # 直接加载该目录作为一个 run

# 输出目录
output_dir = os.path.join(os.getcwd(), 'scalar')
os.makedirs(output_dir, exist_ok=True)

colors = ['b', 'g', 'r', 'c', 'm', 'y', 'k']

# 收集 scalar 名
scalar_set = set()
for run in runs:
    print(f"🔍 正在加载 run: {run}")
    ea = event_accumulator.EventAccumulator(run)
    try:
        ea.Reload()
        scalars = ea.Tags().get('scalars', [])
        print(f"✅ 找到 {len(scalars)} 个 scalar: {scalars}")
        scalar_set.update(scalars)
    except Exception as e:
        print(f"❌ 加载失败: {e}")

scalar_list = sorted(list(scalar_set))

# 展示 scalar 选项
print("\n📋 所有可选 scalar 名：")
for i, name in enumerate(scalar_list):
    print(f"[{i+1}] {name}")

# 用户输入选择
selected_idx = input("\n请输入你想画的 scalar 编号（如 1,3）：")
selected_scalars = [scalar_list[int(i.strip()) - 1] for i in selected_idx.split(',') if i.strip().isdigit()]

# 开始画图并保存
for scalar_name in selected_scalars:
    plt.figure(figsize=(8, 8))  # ✅ 正方形图像
    has_data = False
    for idx, run in enumerate(runs):
        ea = event_accumulator.EventAccumulator(run)
        ea.Reload()
        if scalar_name not in ea.Tags().get('scalars', []):
            print(f"⚠️ run 中没有 {scalar_name}")
            continue
        events = ea.Scalars(scalar_name)
        steps = [e.step for e in events]
        values = [e.value for e in events]
        if steps:
            has_data = True
            plt.plot(steps, values, label=os.path.basename(run), color=colors[idx % len(colors)])

    if has_data:
        plt.title(scalar_name)
        plt.xlabel('Step')
        plt.ylabel(scalar_name)
        plt.legend()
        plt.grid(True)
        plt.tight_layout()

        filename = scalar_name.replace("/", "_") + '.png'
        output_path = os.path.join(output_dir, filename)
        plt.savefig(output_path, dpi=100, bbox_inches='tight')  # ✅ 800x800像素 + 去边
        print(f"✅ 已保存：{output_path}")
    else:
        print(f"🚫 没有数据可画：{scalar_name}")




import os
import matplotlib.pyplot as plt
from tensorboard.backend.event_processing import event_accumulator

log_root = './logs_unetr_affinity3d2'  # 你的目录
runs = [log_root]
colors = ['b', 'g', 'r', 'c', 'm', 'y', 'k']
output_dir = os.path.join(os.getcwd(), 'scalar')
os.makedirs(output_dir, exist_ok=True)

scalar_set = set()
for run in runs:
    print(f"🔍 正在加载 run: {run}")
    ea = event_accumulator.EventAccumulator(run)
    try:
        ea.Reload()
        scalars = ea.Tags().get('scalars', [])
        print(f"✅ 找到 {len(scalars)} 个 scalar: {scalars}")
        scalar_set.update(scalars)
    except Exception as e:
        print(f"❌ 加载失败: {e}")

scalar_list = sorted(list(scalar_set))
print("\n📋 所有可选 scalar 名：")
for i, name in enumerate(scalar_list):
    print(f"[{i+1}] {name}")

selected_idx = input("\n请输入你想画的 scalar 编号（如 1,3）：")
selected_scalars = [scalar_list[int(i.strip()) - 1] for i in selected_idx.split(',') if i.strip().isdigit()]

for scalar_name in selected_scalars:
    plt.figure(figsize=(10, 6))
    has_data = False
    for idx, run in enumerate(runs):
        ea = event_accumulator.EventAccumulator(run)
        ea.Reload()
        if scalar_name not in ea.Tags().get('scalars', []):
            print(f"⚠️ run 中没有 {scalar_name}")
            continue
        events = ea.Scalars(scalar_name)
        steps = [e.step for e in events]
        values = [e.value for e in events]
        if steps:
            has_data = True
            plt.plot(steps, values, label=os.path.basename(run), color=colors[idx % len(colors)])
    if has_data:
        plt.title(scalar_name)
        plt.xlabel('Step')
        plt.ylabel(scalar_name)
        plt.legend()
        plt.grid(True)
        plt.tight_layout()
        output_path = os.path.join(output_dir, scalar_name.replace('/', '_') + '.png')
        plt.savefig(output_path)
        print(f"✅ 已保存：{output_path}")
    else:
        print(f"🚫 没有数据可画：{scalar_name}")




events.out.tfevents.1744773167.guilin-System-Product-Name.672768.0
logs_unetr_affinity3d2


import os
import matplotlib.pyplot as plt
from tensorboard.backend.event_processing import event_accumulator

log_root = './logs'
runs = [d for d in os.listdir(log_root) if os.path.isdir(os.path.join(log_root, d))]
colors = ['b', 'g', 'r', 'c', 'm', 'y', 'k']

# 输出文件夹
output_dir = os.path.join(os.getcwd(), 'scalar')
os.makedirs(output_dir, exist_ok=True)

# 收集所有 scalar 名
scalar_set = set()

print("\n🔍 正在扫描所有 scalar 名...\n")
for run in runs:
    run_path = os.path.join(log_root, run)
    ea = event_accumulator.EventAccumulator(run_path)
    try:
        ea.Reload()
        scalars = ea.Tags().get('scalars', [])
        scalar_set.update(scalars)
        print(f"✅ run={run} 中发现 {len(scalars)} 个 scalar")
    except Exception as e:
        print(f"⚠️ run={run} 加载失败：{e}")

# 显示可选 scalar 名
scalar_list = sorted(list(scalar_set))
print("\n📋 所有可选 scalar 名：")
for i, name in enumerate(scalar_list):
    print(f"[{i+1}] {name}")

# 用户输入选择
selected_idx = input("\n请输入你想画的 scalar 编号（用逗号分隔，如 1,3,5）：")
selected_scalars = [scalar_list[int(i.strip()) - 1] for i in selected_idx.split(',') if i.strip().isdigit()]

print(f"\n🎯 你选择的 scalars: {selected_scalars}\n")

# 画图
for scalar_name in selected_scalars:
    plt.figure(figsize=(10, 6))
    has_data = False
    for idx, run in enumerate(runs):
        run_path = os.path.join(log_root, run)
        ea = event_accumulator.EventAccumulator(run_path)
        try:
            ea.Reload()
            if scalar_name not in ea.Tags().get('scalars', []):
                print(f"⚠️ run={run} 中没有 {scalar_name}")
                continue
            events = ea.Scalars(scalar_name)
            steps = [e.step for e in events]
            values = [e.value for e in events]
            if steps:
                has_data = True
                plt.plot(steps, values, label=run, color=colors[idx % len(colors)])
        except Exception as e:
            print(f"⚠️ run={run} 读取失败：{e}")

    if has_data:
        plt.title(f'{scalar_name} over Steps')
        plt.xlabel('Step')
        plt.ylabel(scalar_name)
        plt.legend()
        plt.grid(True)
        plt.tight_layout()
        filename = scalar_name.replace("/", "_") + '.png'
        output_path = os.path.join(output_dir, filename)
        plt.savefig(output_path)
        print(f"✅ 图像已保存：{output_path}")
    else:
        print(f"🚫 没有数据可画：{scalar_name}")



import os
import matplotlib.pyplot as plt
from tensorboard.backend.event_processing import event_accumulator

log_root = './logs'
scalars_to_plot = ['loss', 'val/loss', 'accuracy', 'lr']
runs = [d for d in os.listdir(log_root) if os.path.isdir(os.path.join(log_root, d))]
colors = ['b', 'g', 'r', 'c', 'm', 'y', 'k']

# 创建 scalar 输出文件夹
output_dir = os.path.join(os.getcwd(), 'scalar')
os.makedirs(output_dir, exist_ok=True)

for scalar_name in scalars_to_plot:
    plt.figure(figsize=(10, 6))
    for idx, run in enumerate(runs):
        run_path = os.path.join(log_root, run)
        ea = event_accumulator.EventAccumulator(run_path)
        ea.Reload()

        if scalar_name not in ea.Tags()['scalars']:
            print(f"⚠️ {scalar_name} 不存在于 {run_path}")
            continue

        events = ea.Scalars(scalar_name)
        steps = [e.step for e in events]
        values = [e.value for e in events]

        if len(steps) > 0:
            plt.plot(steps, values, label=run, color=colors[idx % len(colors)])

    plt.title(f'{scalar_name} over Steps')
    plt.xlabel('Step')
    plt.ylabel(scalar_name)
    if plt.gca().has_data():
        plt.legend()
    plt.grid(True)
    plt.tight_layout()
    output_path = os.path.join(output_dir, f'{scalar_name.replace("/", "_")}.png')
    plt.savefig(output_path)
    print(f'✅ 图像已保存：{output_path}')



UserWarning: No artists with labels found to put in legend.  Note that artists whose label start with an underscore are ignored when legend() is called with no argument.
  plt.legend()


import os
import matplotlib.pyplot as plt
from tensorboard.backend.event_processing import event_accumulator

# 设置 TensorBoard 日志根目录
log_root = './logs'

# 你要画的 scalar 名称（包括 lr、loss、accuracy 等）
scalars_to_plot = ['loss', 'val/loss', 'accuracy', 'lr']  # 加上学习率 lr

# 遍历所有 runs（子目录）
runs = [d for d in os.listdir(log_root) if os.path.isdir(os.path.join(log_root, d))]

# 颜色列表
colors = ['b', 'g', 'r', 'c', 'm', 'y', 'k']

for scalar_name in scalars_to_plot:
    plt.figure(figsize=(10, 6))
    for idx, run in enumerate(runs):
        run_path = os.path.join(log_root, run)

        # 加载 TensorBoard 的 event 文件
        ea = event_accumulator.EventAccumulator(run_path)
        ea.Reload()

        if scalar_name not in ea.Tags()['scalars']:
            print(f"⚠️ {scalar_name} 不存在于 {run_path}")
            continue

        events = ea.Scalars(scalar_name)
        steps = [e.step for e in events]
        values = [e.value for e in events]

        plt.plot(steps, values, label=run, color=colors[idx % len(colors)])

    plt.title(f'{scalar_name} over Steps')
    plt.xlabel('Step')
    plt.ylabel(scalar_name)
    plt.legend()
    plt.grid(True)
    plt.tight_layout()
    plt.savefig(f'{scalar_name}.png')
    print(f'✅ 图像已保存：{scalar_name}.png')
    # plt.show()  # 如果你希望直接弹出窗口看图，可以取消注释



import os
import tifffile
import numpy as np
from PIL import Image

# 四个.tif文件路径（灰度和彩色混合都支持）
tif_paths = [
    '/path/to/file1.tif',
    '/path/to/file2.tif',
    '/path/to/file3.tif',
    '/path/to/file4.tif',
]

gap = 10  # 图片间白色间隙（像素）

def to_rgb_array(img):
    """将图像标准化为 RGB"""
    if img.ndim == 2:
        return np.stack([img]*3, axis=-1)
    elif img.ndim == 3:
        if img.shape[2] == 1:
            return np.concatenate([img]*3, axis=-1)
        elif img.shape[2] == 3:
            return img
        elif img.shape[2] == 4:
            return img[:, :, :3]
    raise ValueError("Unsupported image format.")

# 读取图像并转为RGB
images = []
for path in tif_paths:
    img_stack = tifffile.imread(path)
    first_slice = img_stack[0] if img_stack.ndim >= 3 else img_stack
    rgb_img = to_rgb_array(first_slice)
    images.append(rgb_img.astype(np.uint8))

# 转为 PIL 图像
pil_images = [Image.fromarray(img) for img in images]

# 计算总宽度（包括间隙）
height = max(img.height for img in pil_images)
total_width = sum(img.width for img in pil_images) + gap * (len(pil_images) - 1)

# 创建新画布（白底）
result = Image.new("RGB", (total_width, height), color=(255, 255, 255))

# 拼接图像
x_offset = 0
for i, img in enumerate(pil_images):
    result.paste(img, (x_offset, 0))
    x_offset += img.width + gap

# 创建输出文件夹
output_dir = os.path.join(os.getcwd(), 'concat')
os.makedirs(output_dir, exist_ok=True)

# 保存为 PNG
output_path = os.path.join(output_dir, 'concat_output.png')
result.save(output_path)

print(f"✅ 拼接完成，已保存到：{output_path}")



import os
import tifffile
import numpy as np
from PIL import Image

# 指定四个 tif 图像路径（灰度和彩色混合均可）
tif_paths = [
    '/path/to/file1.tif',
    '/path/to/file2.tif',
    '/path/to/file3.tif',
    '/path/to/file4.tif',
]

def to_rgb_array(img):
    """确保图像为 RGB 格式"""
    if img.ndim == 2:  # 灰度图
        return np.stack([img] * 3, axis=-1)
    elif img.ndim == 3:
        if img.shape[2] == 1:
            return np.concatenate([img] * 3, axis=-1)
        elif img.shape[2] == 3:
            return img
        elif img.shape[2] == 4:
            return img[:, :, :3]  # 丢弃 alpha 通道
    raise ValueError("Unsupported image format.")

# 读取图像并转换为 RGB
images = []
for path in tif_paths:
    img_stack = tifffile.imread(path)
    first_slice = img_stack[0] if img_stack.ndim >= 3 else img_stack
    rgb_img = to_rgb_array(first_slice)
    images.append(rgb_img)

# 转为 PIL 图像
pil_images = [Image.fromarray(img.astype(np.uint8)) for img in images]

# 计算拼接后尺寸
height = max(img.height for img in pil_images)
total_width = sum(img.width for img in pil_images)

# 拼接图像（横向）
result = Image.new("RGB", (total_width, height))
x_offset = 0
for img in pil_images:
    result.paste(img, (x_offset, 0))
    x_offset += img.width

# 创建输出目录
output_dir = os.path.join(os.getcwd(), 'concat')
os.makedirs(output_dir, exist_ok=True)

# 保存为 PNG
output_path = os.path.join(output_dir, 'concat_output.png')
result.save(output_path)

print(f"✅ 拼接完成，已保存为 PNG：{output_path}")
