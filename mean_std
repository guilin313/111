import os
import numpy as np
import tifffile as tiff

def gather_tif_files(root_dir):
    """收集指定目录下所有子文件夹中的 TIFF 文件路径"""
    files = []
    for dirpath, _, filenames in os.walk(root_dir):
        for f in filenames:
            if f.endswith(".tif"):
                files.append(os.path.join(dirpath, f))
    return files

def compute_mean_std_batched(tif_files, batch_size=100):
    """分批计算 TIFF 图像数据的均值 (mean) 和标准差 (std)"""
    mean_sum = 0
    std_sum = 0
    total_pixels = 0

    for i in range(0, len(tif_files), batch_size):
        batch_files = tif_files[i:i + batch_size]  # 取当前 batch
        batch_data = []

        for file in batch_files:
            img = tiff.imread(file).astype(np.float32)  # 读取并转换数据类型
            batch_data.append(img)

        batch_data = np.concatenate(batch_data, axis=0)  # 拼接为一个 batch
        mean_batch = np.mean(batch_data)
        std_batch = np.std(batch_data)

        mean_sum += mean_batch * batch_data.size
        std_sum += std_batch * batch_data.size
        total_pixels += batch_data.size

        print(f"Processed {i + len(batch_files)}/{len(tif_files)} images...")  # 进度条

    mean = mean_sum / total_pixels
    std = std_sum / total_pixels
    return mean, std

# 运行代码
root_dir = "your_dataset_folder"  # 替换为你的数据集文件夹路径
tif_files = gather_tif_files(root_dir)  # 获取所有 TIFF 文件
mean, std = compute_mean_std_batched(tif_files, batch_size=100)  # 计算均值和标准差

print(f"Mean: {mean:.6f}, Std: {std:.6f}")





def compute_mean_std(root_dir, cache_file="mean_std_cache.json"):
    if os.path.exists(cache_file):
        try:
            with open(cache_file, "r") as f:
                cached = json.load(f)
            if cached.get("dir") == os.path.abspath(root_dir):
                logger.info("Loaded mean/std from cache.")
                return cached["mean"], cached["std"]
        except Exception as e:
            logger.warning(f"Failed to load mean/std cache: {e}")

    all_voxels = []
    for root, _, files in os.walk(root_dir):
        for fname in files:
            if fname.endswith(".tif"):
                fpath = os.path.join(root, fname)
                try:
                    vol = tifffile.imread(fpath).astype(np.float32)
                    all_voxels.append(vol.flatten())
                except Exception as e:
                    print(f"Warning: failed to read {fpath}: {e}")
    all_voxels = np.concatenate(all_voxels)
    mean = float(np.mean(all_voxels))
    std = float(np.std(all_voxels))

    try:
        with open(cache_file, "w") as f:
            json.dump({"dir": os.path.abspath(root_dir), "mean": mean, "std": std}, f)
    except Exception as e:
        logger.warning(f"Failed to write mean/std cache: {e}")

    return mean, std
